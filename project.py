# -*- coding: utf-8 -*-
"""Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Edh-oWDYNYft1GMTeBpYegHWjS0mfEGX
"""

# 1. Upload and Load the Dataset
import pandas as pd

df = pd.read_csv('/content/USA_Housing.csv')  # Update if your path differs

# 2. Explore the Dataset
print(df.head())
print("Shape:", df.shape)
print("Columns:", df.columns.tolist())
df.info()
print(df.describe())

# 3. Check for Missing Values and Duplicates
print("Missing values:\n", df.isnull().sum())
print("Duplicate rows:", df.duplicated().sum())

# 4. Visualize Distributions
import seaborn as sns
import matplotlib.pyplot as plt

sns.histplot(df['Price'], kde=True)
plt.title("Distribution of House Prices")
plt.xlabel("Price")
plt.show()

sns.pairplot(df[['Avg. Area Income', 'Avg. Area House Age', 'Avg. Area Number of Rooms', 'Area Population', 'Price']])
plt.show()

# 5. Feature and Target Selection
target = 'Price'
features = df.columns.drop(['Address', target])  # Drop 'Address' since it's text
X = df[features]
y = df[target]

# 6. Feature Scaling
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# 7. Train-Test Split
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# 8. Model Training and Evaluation
model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print("MSE:", mean_squared_error(y_test, y_pred))
print("R¬≤ Score:", r2_score(y_test, y_pred))

# 9. Create Gradio App for Prediction
!pip install gradio

import gradio as gr

def predict_price(income, house_age, rooms, bedrooms, population):
    input_data = [[income, house_age, rooms, bedrooms, population]]
    input_scaled = scaler.transform(input_data)
    prediction = model.predict(input_scaled)
    return round(prediction[0], 2)

inputs = [
    gr.Number(label="Avg. Area Income"),
    gr.Number(label="Avg. Area House Age"),
    gr.Number(label="Avg. Area Number of Rooms"),
    gr.Number(label="Avg. Area Number of Bedrooms"),
    gr.Number(label="Area Population")
]

output = gr.Number(label="üè† Predicted House Price")

gr.Interface(
    fn=predict_price,
    inputs=inputs,
    outputs=output,
    title="üè° USA Housing Price Predictor",
    description="Enter features to predict the price of a house in the USA housing market."
).launch()